name: 'WIPAC Dev Py Versions'
description: 'GitHub Action Package for Generating a Build Matrix of Supported Python Versions for a Package'

outputs:
  matrix:
    description: "List of Supported Python Versions"
    value: ${{ steps.gather-py-versions.outputs.matrix }}

runs:
  using: "composite"
  steps:
    - id: gather-py-versions
      run: |
        set -e
        sudo apt-get update
        python -m venv action_venv
        . action_venv/bin/activate
        pip3 install -r ${{ github.action_path }}/requirements.txt
        
        MIN_THRU_MAX_SERIES_SPACED=$(python -c '
        import os, re
        from wipac_dev_tools import semver_parser_tools
        
        semver_range = ""
        if os.path.isfile("pyproject.toml"):
            # ex: requires-python = ">=3.8, <3.13"
            pat = re.compile(r"requires-python = \"(?P<semver_range>[^\"]+)\"$")
            with open("pyproject.toml") as f:
                for line in f:
                    if m := pat.match(line):
                        semver_range = m.group("semver_range")
            if not semver_range:
                raise Exception("could not find `requires-python` entry in pyproject.toml")
        elif os.path.isfile("setup.cfg"):
            # ex: python_requires = >=3.8, <3.13
            pat = re.compile(r"python_requires = (?P<semver_range>.+)$")
            with open("setup.cfg") as f:
                for line in f:
                    if m := pat.match(line):
                        semver_range = m.group("semver_range")
            if not semver_range:
                raise Exception("could not find `python_requires` entry in setup.cfg")
        else:
            raise Exception("could not find pyproject.toml nor setup.cfg")
        
        top_python = semver_parser_tools.get_latest_py3_release()
        all_matches = semver_parser_tools.list_all_majmin_versions(
          major=top_python[0],
          semver_range=semver_range,
          max_minor=top_python[1],
        )
        print(" ".join(f"{v[0]}.{v[1]}" for v in all_matches))
        ')
        
        echo $MIN_THRU_MAX_SERIES_SPACED
        
        # now, output
        echo "matrix=$( echo $MIN_THRU_MAX_SERIES_SPACED | jq -cR 'split(" ")' )" >> $GITHUB_OUTPUT
      shell: bash
